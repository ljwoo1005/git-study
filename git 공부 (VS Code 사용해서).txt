git 공부 (VS Code 사용해서)

git 설치 후 바탕화면 폴더 아무거나 shift+우클릭해서 window powershell 열고
git 최초 사용이면 유저 이름세팅부터

1. git config --global user.email "이메일 쓸거"
2. git config --global user.name "이름 쓸거"

하면 끝

-------------------------------------------------------------------------------------------------

VS Code 열고 작업할 폴더 하나 선택해서 열자
폴더 안에 파일 아무거나 생성하고 내용 적어넣은 다음 저장하면 폴더 안에 파일이 생성되겠지
그상태에서 VS Code에서 터미널 열고(그럼 터미널 경로가 작업중인 폴더로 알아서 지정됨)
여기서 아까 만든 파일을 git을 이용하여 저장(백업) 해보자

먼저 폴더에 git을 등록해놓자

1. git init

해당 폴더에 git repository를 생성한다
이후에 git에 추가할 파일을 해당 커맨드로 등록한다

2. git add 파일명(확장자까지 전부 입력)
3. git commit -m '커밋 메세지'

하면 끝임
참고로 커밋 메세지 없으면 커밋 안됨

[main a2d9a52] 두번째 파일
 1 file changed, 1 insertion(+)
 create mode 100644 app2.txt

커밋하면 이런식으로 나옴
똑같은 파일을 수정 후에 다시 커밋을 한다면

[main b6c46ff] 한번에 두개를
 2 files changed, 6 insertions(+), 2 deletions(-)

이런식으로 삭제되는 것도 보임
만약 변하지 않은 파일을 다시 커밋하면

On branch main
nothing to commit, working tree clean

이런식으로 나오더라

작업 폴더에서 git add로 파일 추가하면 "staging area"라는 영역에 저장이 되고,
git commit을 입력하면 "staginig area"에 있는 파일을 "repository"(저장소)라는 영역에 저장을 하게 됨
staging area에 들어가는 파일을 선택하는 행위를 "staging"한다 라고 말함
-> commit할 파일을 골라놨다는 뜻

4. git add . 
하면 작업 폴더 안에 있는 모든 파일을 스테이징하게 됨

5. git status
현재 staging area의 상태를 보여주는데 staging area에 파일이 존재한다면 이렇게 나옴

On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   app.txt
        modified:   app2.txt
        new file:   esghe.txt

스테이징한 파일 목록을 보여주는데 어떤게 추가됐는지, 어떤게 수정됐는지 나옴

6. git log --all --oneline
commit 내역을 조회한다.

b6c46ff (HEAD -> main) 한번에 두개를
a2d9a52 두번째 파일
eb6fe97 두번째 커밋
35d10b4 첫 커밋

이런식으로 나옴
커밋은 간단한 기능 하나를 완성하거나 수정했을 때 한 번씩 해주면 좋음
평소 시도떼도없이 ctrl + s 하듯이 하는건 아님

Q. 얼마나 자주 commit 하는게 좋음?

A. ctrl + s 누르는 것 처럼 5초마다 습관적으로 할 이유는 없고 

간단한 기능을 하나 추가할 때 마다 commit 하면 됩니다. 



예를 들어 웹개발시 회원가입기능을 만든다고 하면 

- 회원가입 폼 레이아웃을 만들면 commit 하고 

- 입력한 이메일이 맞는지 검증하는 기능을 만들었으면 commit 하고 

- 서버에 전송하는 기능을 만들었으면 commit 하고 

대충 이렇게 작은 작업하나 마쳤으면 commit 하는게 좋습니다. 

물론 3개 다 만들하고 commit 하는 사람들도 있습니다. 본인 맘임  

그렇다고 합니다

-------------------------------------------------------------------------------------------------

VS Code에 내장되어있는 깃 기능을 사용하면 굳이 명령어를 입력하지 않아도 커밋이 가능함
깃모양 누르고 파일 수정한 후에 저장하면 알아서 변경 사항 항목에 파일이 추가되고, 마우스 갖다대면 오른쪽에 +버튼 눌러서 스테이징도 가능
커밋버튼이나 상단 체크버튼 누르면 그대로 커밋도 가능

커밋 전에는 현재 파일 vs 최근 commit 차이점을 확인하는 것이 좋은 습관

1. git diff
최근 commit vs 현재 파일의 차이점을 보여주는 명령어

diff --git a/app.txt b/app.txt
index 2646db1..8063fba 100644
--- a/app.txt
+++ b/app.txt
@@ -1,6 +1,7 @@
-test
+testsdfsdfsdf
 testestestsetsetet2

-ㅅㄷㄴㅅ233224
+ㅅㄷㄴㅅ233224 ddddd
+dPdkj

-또수정하ㅣㅁdddd
\ No newline at end of file
+또수정하ㅣㅁddddㄱㄳㄳ
\ No newline at end of file

이런식으로 나옴
근데 터미널의 한계로 가독성이 별로 좋진않음
조금 더 좋은게

2. git difftool
가독성이 더 좋게 변경점을 확인할 수 있음

  test                                                                                                          |  testsdfsdfsdf
  testestestsetsetet2                                                                                           |  testestestsetsetet2
                                                                                                                |  
  ㅅㄷㄴㅅ233224                                                                                                |  ㅅㄷㄴㅅ233224 ddddd
  --------------------------------------------------------------------------------------------------------------|  dPdkj
                                                                                                                |  
  또수정하ㅣㅁdddd                                                                                              |  또수정하ㅣㅁddddㄱㄳㄳ

이런식으로 나오는데 이게 훨씬좋네

3. git difftool 커밋아이디
커밋아이디는 어디서 보냐

git log --all --oneline 치면 왼쪽에 코드같은것들이 커밋아이디
git difftool 커밋아이디1 커밋아이디2
하면 커밋아이디1과 커밋아이디2의 차이점을 확인할 수 있음

근데 요새는 difftool도 안쓴대
VS Code Extesions에 들어가서 git검색만해도 뭐가 막 나오는데
git graph 등록하고 VS Code 깃버튼 누르면 상단에 그래프모양 생김
이거 누르면 git log한것마냥 커밋 리스트가 쭉 나오고, 클릭해서 파일 비교도 쉽게쉽게 가능하다

-------------------------------------------------------------------------------------------------

커밋하면서 코드 계속짜면 갑자기 새로운 기능을 추가해야하는 경우가 많음
원본에 계속 작성해서 커밋해도 되겠지만 내 코드에 확신이 없으면???
이럴 때 안전하게 코드를 추가하기 위해서 프로젝트의 복사본을 만들어 거기에 먼저 개발 테스트해보는게 좋은 방법임

여기서 git의 branch 기능을 이용하면 위에 말들을 쉽게 할 수 있음
branch는 commit의 복사본같은 놈

1. git branch 브랜치명(띄어쓰기안됨)
이러면 브랜치명으로 프로젝트 사본을 하나 만든 셈(정확히는 최근 커밋의 사본)

2. git switch 브랜치명
하면 브랜치명의 사본 프로젝트로 이동한다

PS C:\Users\LJW\Desktop\git공부> git status
On branch 띄어쓰기안되냐   <<<<<< 이게 현재 브랜치가 어디인지 알려주는것
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   app.txt

no changes added to commit (use "git add" and/or "git commit -a")

여기서 새로 파일만들고 스테이징 후 커밋까지 한다
그러면 이런식으로 현상이 구현됨

                                  ---------- 
                         「￣￣  ｜commit2-1｜ (새로만든 branch)
                         ｜       -----------
  -------            ---------
｜commit1｜  --->   ｜commit2｜ (main branch)
  -------            ---------

여기서 현재 브랜치가 아닌 main 브랜치로 다시 이동하면 아까 만들었던 새로운 파일이 없어져있다
왜냐면 아까만든 파일은 새로만든 브랜치에서 만들었지, main에선 안만들었기 때문임

이렇게 가지로 뻗어나가는 브랜치들을 하나로 합칠 수 있다.

                                   ---------- 
                          ／￣￣  ｜commit2-1｜ ￣￣￣￣￣￣￣￣＼
                          ｜       ----------                   ｜
  -------            ---------          ---------             ---------
｜commit1｜  --->   ｜commit2｜  --->  ｜commit3｜   --->    ｜commit4｜
  -------            ---------          ---------             ---------

이런식으로 곁가지 브랜치를 하나의 브랜치로 합친다.
먼저 하나로 합칠 브랜치(메인 줄기)로 switch한다.

3. git merge 곁가지 브랜치명(메인 줄기 브랜치 말고 곁가지)

이 때, 메인 줄기와 곁가지 줄기가 서로 다른 파일을 수정했다면 merge명령어 입력 즉시 성공적으로 브랜치가 합쳐진다.
하지만 메인 줄기와 곁가지 줄기가 같은 파일의 같은 줄을 수정했다면 충돌(confilct)이 발생
메인 줄기를 먼저 적용할지, 곁가지 줄기를 먼저 적용할지 알 수 없기 때문이다.
이러면 사용자가 직접 confilct를 해결해주어야 한다.

confilct가 발생한다면 VS Code는 confilct가 발생한 파일의 줄에서 어떤 코드를 선택할건지 표시가 나오는데, 
- 여기서 사용자가 원하는 코드를 선택한 후
- git add
- git commit
해주면 된다.

git --all --oneline --graph 하면 합쳐진 브랜치 확인 가능

만약 confilct 상태에서 git status를 입력하면
merge 단계에서 confilct 상태라고 표시가 나오더라

-------------------------------------------------------------------------------------------------

위에서 merge할 때 곁가지 브랜치에서 신규 커밋한 내용이 있고, 메인 브랜치에서 신규 커밋한 내용이 각각 따로 있다
이 상황에서 merge하면 두 내용이 하나로 합쳐지는데, 이걸 3-way merge라고 한다.
일반적으로 merge하면 볼 수 있는 상황이다.

다음 상황을 보자.
곁가지 브랜치 생성 이후 곁가지 브랜치에서만 신규 커밋이 있고, 메인 브랜치에서는 커밋이 없는 경우가 있다.

                                   ----------             ----------
                          ／￣￣  ｜commit2-1｜   --->   ｜commit2-2｜ 
                          ｜       ----------             ----------            
  -------            ---------  
｜commit1｜  --->   ｜commit2｜  
  -------            ---------   

이 상황에선 메인 브랜치 커밋이 없기 때문에 merge하게 되면 곁가지 브랜치의 이름이 main 브랜치가 된다
이것이 fast-forward merge이다.
합칠게 딱히 없기 때문에 신규 커밋이 있는 브랜치의 이름만 main으로 바꾸면 그게 합친거나 다름없다.

merge 완료된 브랜치는 그대로 남아있다.
필요없다 판단하면 삭제하면 된다.

1. git branch -d 브랜치명

merge를 안한 브랜치의 삭제는

2. git branch -D 브랜치명
d를 대문자로 넣어주면 된다.

merge 말고도 다른 방법으로 브랜치를 합칠 수 있는데, rebase라는 것이다.
rebase는 곁가지 브랜치의 커밋 분기 시작점을 옮길 수 있다.
원래 메인커밋 2번이 브랜치 분기였던 브랜치의 커밋 시작점을 메인커밋 3번으로 옮길 수 있다.
시작점 옮기고 merge하면 3-way merge가 아닌 fast-forward merge로 merge를 발생시킬 수 있다.

사용하는 이유는 git log 시 3-way merge는 로그가 복잡하게 찍히기 때문에 간단한 브랜치들은 rebase를 통해서 간단하고 깔끔하게 로그를 만들어낼 수 있다.

rebase 단점은 confilct가 많이 발생할 수 있다.

rebase는 merge랑 순서가 조금 다르다.
merge의 경우 중심 브랜치로 먼저 switch 후 merge 커맨드로 브랜치를 합쳤다.

rebase & merge는 먼저 새로운 브랜치로 switch 후 

3. git rebase 중심브랜치명

하면 새로운 브랜치의 분기 시작점을 중심 브랜치의 최신 커밋으로 이동시킬 수 있다.

                                   ----------             ----------
                          ／￣￣  ｜commit2-1｜   --->   ｜commit2-2｜ 
                          ｜       ----------             ----------            
  -------            ---------            ---------
｜commit1｜  --->   ｜commit2｜  --->    ｜commit3｜
  -------            ---------            ---------

                                  ↓
                                                       ----------             ----------
                                              ／￣￣  ｜commit2-1｜   --->   ｜commit2-2｜ 
                                              ｜       ----------             ----------            
  -------            ---------            ---------
｜commit1｜  --->   ｜commit2｜  --->    ｜commit3｜
  -------            ---------            ---------

그 다음 메인 브랜치로 switch 후 merge 하면  fast-forward merge가 된다

마지막으로 squash and merge 방법이 있다.
3-way merge를 남발하면 나중에 git commit log가 굉장히 더러워진다.

4. git merge --squash 곁가지 브랜치명

                                   ----------             ----------
                          ／￣￣  ｜commit2-1｜   --->   ｜commit2-2｜ 
                          ｜       ----------             ----------            
  -------            ---------            ---------
｜commit1｜  --->   ｜commit2｜  --->    ｜commit3｜
  -------            ---------            ---------

이 상태에서 squash 키워드를 추가한 merge를 하면

                                   ----------             ----------
                          ／￣￣  ｜commit2-1｜   --->   ｜commit2-2｜ 
                          ｜       ----------             ----------            
  -------            ---------            ---------                                ---------
｜commit1｜  --->   ｜commit2｜  --->    ｜commit3｜   ---------------------->    ｜commit4｜(곁가지 브랜치와 메인 브랜치의 내용은 합치지만, 
  -------            ---------            ---------                                --------- 선으로 이어지지 않고 아예 새로운 커밋이 생성됨)

이런 현상이 발생한다. 이 상태에서 main 브랜치 log를 찍으면 곁가지 브랜치에서 작업했던 짜잘한 commit 내용이 출력되지 않는다.
비주얼적인 요소로 사용하는 것이다.

-------------------------------------------------------------------------------------------------

git은 버전 관리 프로그램이기 때문에
파일 복구, commit 복구, 과거로 이동이 가능하다

먼저 파일 하나를 되돌리는 법을 알아보자

1. git restore 파일명

파일 하나를 최근 커밋으로 복구시킨다.

2. git restore --source 커밋아이디 파일명

파일 하나를 특정 시점의 커밋으로 복구시킨다.

3. git restore --staged 파일명

파일 하나의 스테이징 상태를 취소시킨다.

이번엔 커밋 단위로 복구시켜보자
여러 커밋 중에서 특정 커밋에 생성한 파일 하나가 말썽이다.
그 파일이 생성된 시점의 커밋을 어떻게 하고 싶은데,

4. git revert 커밋아이디

를 하면 해당 커밋아이디에 발생한 작업내용만 취소하는 새로운 커밋을 생성하게 된다.
입력하면 에디터 뜨는데, 커밋메세지 수정하고 닫으면 됨

9bfa13f (HEAD -> main) c
f7fb603 b
52bbf7a a

여기서 git revert f7fb603 입력하면

4552ee8 (HEAD -> main) Revert "오오오"
9bfa13f c
f7fb603 b
52bbf7a a

이렇게 나오는데, 4552ee8 커밋 부분에는 f7fb603 커밋에서 작업한 내용이 빠져있는 것이다.

git revert는 커밋 아이디를 여러개 입력해도 된다.
git revert HEAD 하면 최근 commit을 취소할 수 있다.
merge commit 도 취소할 수 있음
합쳐진 브랜치가 다시 쪼개질듯
구글링해서 찾아보자

5. git reset --hard 커밋아이디

커밋아이디 시점으로 모든 것을 되돌린다.
커밋한 로그조차 사라진다.
혼자 작업할 때나 쓰지, 협업 시에는 사용금지
왜냐하면 작업 내용, 작업 기록(로그)조차 전부 없애버리기 때문

6. git reset --soft 커밋아이디

이건 커밋아이디 시점으로 모든 것을 되돌리는 행위를 스테이징하는 것이다.
아직 적용된건 아니니까 그대로 진행할 수도 있고, 물릴 수도 있다.

7. git reset --mixed 커밋아이디

이건 커밋아이디 시점으로 모든 것을 되돌리는 행위를 unstaging한다.
잘 모르겠다.

-------------------------------------------------------------------------------------------------

git은 버전 관리 프로그램이다
git이 파일을 기록해두는 장소(히스토리를 기록해두는 장소)를 repository라고 부른다
기본적으로 폴더 내에 git init 해서 repository 만든건 로컬 환경에서나 쓸 수 있다.
컴퓨터 불타면 복구못함

그리고 실제로 개발할 때에는 로컬 repository 뿐만 아니라 온라인 repository도 만들어서
어느정도 개발이 진행되면 로컬 repository의 내용을 온라인 repository에도 올려서 백업해두면
컴퓨터 불타도 복구 가능함
그리고 온라인으로 백업하면 다른 사람도 공유할 수 있으니 협업도 가능해짐

가장 대표적인 온라인 repository를 사용하기 위해 github.com으로 가자

로그인하고 new repository 눌러서 도메인 설정하고 확인 누르면 온라인 repository가 생성된 것
이걸 로컬 repository랑 연결(로컬을 온라인에 백업)
이게 깃허브를 사용하는 1차적인 이유임

github.com은 기본 브랜치 이름을 main으로 강요한다
따라서 로컬 repository의 기본 브랜치 이름도 main으로 바꾸자.

1. git branch -M main

이제 로컬을 온라인에 백업하려면 

2. git push
명령어를 사용하면 된다.
정확히는 뒤에 여러가지 붙여야 한다.

2-1. git push -u 원격저장소주소 올릴로컬브랜치명

내꺼 기준으로 함 써볼까
git push -u https://github.com/ljwoo1005/git-study.git main
이래하면 내 로컬 repository가 깃허브 온라인 repository로 백업

push하고 깃허브 온라인 repository 새로고침 하면 내 로컬 repository에 있는 파일들이 잘 백업되어있음

근데 주소가 너무 길어 일일히 치기 힘드니까
git에서 변수 문법을 사용하여 주소를 변수에 담아서 사용할 수가 있음

3. git remote add 변수명 값(여기선 주소)

git remote add origin https://github.com/ljwoo1005/git-study.git
이래하면 origin이라는 변수명에 주소가 들어간다

그럼 git push -u origin main
이래하면 위에 긴거랑 똑같은 명령어 됨

여기서 중간에 "-u"라는 것은 뒤에 붙은 주소랑 브랜치명을 기억하라는 뜻이니까
저거 한 번 했으면 앞으로 git push 만 적어도 똑같이 작동함
대신 같은 온라인 repository 주소에다가 같은 로컬 브랜치를 백업할 때만 가능함

변수목록은 git remote -v

-------------------------------------------------------------------------------------------------

온라인 repository에 백업을 했으면 다른 사람이 여기에 접근해서 백업한 파일을 가져다 쓸 수 있음
물론 같은 온라인 repository에 push도 가능함
이런게 협업이지

그럴라면 이 팀원이 협업할 온라인 repository의 파일들을 먼저 가져와야겠지
그럼 깃허브에 download zip으로 파일을 직접 받아도 되고,
혹은 git clone을 사용하면 댐
내가 그냥 다른 팀원 역할도 하겠음

먼저 새로운 폴더를 만들고, VS Code에서 해당 폴더를 열자
그리고 터미널 열고 이거 치자

1. git clone 원격저장소주소

그럼 원격저장소주소에 있는 모든 파일이 폴더에 다운로드 됨
파일은 다운로드 했지만 이상태에선 push를 할 수가 없음
push할려면 먼저 팀원이 깃허브 아이디가 있어야되고,
두번쨰로 팀원이 온라인 repository에 collaborators << 여기에 팀원 깃허브 아이디를 등록해놔야 함
Settings 눌러서 왼쪽에 Access목록에 있네

또 다른 문제가 있는데, 다른 사람이 먼저 git push를 하면 내가 git push를 못함
나는 팀원이 없으니까 가상의 인물이 온라인 repository에 git push를 했다고 가정할거임
실제로는 그냥 깃허브 가서 온라인 repository에 새로운 파일 만들고 commit할거임. 그럼 그게 그거지

그러고 내 원래 폴더에서 파일 새로만들고 git add . , git commit 한 후에 git push 했음

PS C:\Users\LJW\Desktop\git공부> git push -u origin main
To https://github.com/ljwoo1005/git-study.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/ljwoo1005/git-study.git'

이런 에러가 나왔군요!
내가 push하려는 온라인 repository에 새로운 파일이 생기면 나는 git push 못함
정확히는 온라인 repository에 있는게 로컬 repository에 없으면 git push를 못함

이럴 때 git pull 쓰는거임
무슨 뜻이냐면 온라인 repository에 있는 내용을 로컬 repository에 합쳐주세요 하는거임

2. git pull 원격저장소주소 브랜치명

이러면 현재 온라인 repository에 저장된 내용들이 로컬 repository에 merge 됨
이 상태면 로컬 repository는 온라인 repository의 내용을 모두 가지고 있기 때문에 git push가 가능해짐

git pull이라는건 엄밀히 말하면 git fetch + git merge임
git fetch가 뭐냐, 온라인 repository의 신규 commit을 가져와서 임시 브랜치에 저장해주는 거고,
그상태에서 git merge를 통해 내 로컬 브랜치랑 합치는 것
그렇기에 merge confilct가 발생할 수도 있음
알아서 잘 해결하면 됨

결론 : git push 하기 전에 git pull부터 하자


-------------------------------------------------------------------------------------------------

